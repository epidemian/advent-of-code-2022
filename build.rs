use std::{collections::HashMap, fs};

// Generate a unit test case for each sample file in ./samples.
//
// Note: It would be awesome if this build step wasn't needed, and instead test cases could be
// generated dynamically in Rust's builtin test runner. But alas, that cannot be done, as the only
// way of defining a unit test is through the #[test] attr, and that is some compile-time stuff. A
// similar result could be achieved by using a proc-macro or an external library like libtest-mimic,
// but i couldn't be bothered.
fn main() {
    println!("cargo:rerun-if-changed=./samples");

    let mod_names_by_day: HashMap<usize, String> = file_name_stems_in("./src")
        .filter(|name| name.starts_with("day_"))
        .map(|name| {
            let day_num = name.split('_').nth(1).unwrap().parse().unwrap();
            (day_num, name)
        })
        .collect();

    let mut sample_numbers: Vec<usize> = file_name_stems_in("./samples")
        .map(|name| name.parse().expect("sample file name must be a number"))
        .collect();
    sample_numbers.sort();

    let test_lines: Vec<_> = sample_numbers
        .iter()
        .map(|day_num| {
            let Some(mod_name) = mod_names_by_day.get(day_num) else {
                panic!("could not find module to run sample {day_num}")
            };
            let ignore_attr = if *day_num == 22 { "#[ignore] " } else { "" };
            format!("    {ignore_attr}#[test] fn {mod_name}_sample() {{ run_sample_test({day_num}, {mod_name}::run) }}")
        })
        .collect();

    let contents = SAMPLES_FILE_TEMPLATE.replace("{TESTS}", &test_lines.join("\n"));

    fs::write("src/sample_tests.rs", contents).unwrap();
}

fn file_name_stems_in(dir: &str) -> impl Iterator<Item = String> {
    fs::read_dir(dir).unwrap().filter_map(|entry| {
        let path = entry.expect("valid entry").path();
        let file_stem = path.file_stem()?.to_str()?;
        Some(file_stem.to_owned())
    })
}

const SAMPLES_FILE_TEMPLATE: &str = r#"// This file was auto-generated by build.rs

#[cfg(test)]
mod tests {
    use crate::*;

{TESTS}

    fn run_sample_test(day_num: usize, day_fn: fn(&str) -> String) {
        let path = format!("./samples/{day_num:02}.txt");
        let content = std::fs::read_to_string(path).expect("error reading sample file");
        let (input, expected_output) = content
            .split_once("\n~~~\n")
            .expect("expected '~~~' on sample file");
        let output = day_fn(input);
        assert_eq!(output, expected_output.trim());
    }
}
"#;
